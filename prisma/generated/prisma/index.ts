// Code generated by Prisma (prisma@1.18.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  apontamentos: (where?: ApontamentosWhereInput) => Promise<boolean>;
  ponto: (where?: PontoWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  apontamentos: (where: ApontamentosWhereUniqueInput) => Apontamentos;
  apontamentoses: (
    args?: {
      where?: ApontamentosWhereInput;
      orderBy?: ApontamentosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ApontamentosNode>;
  apontamentosesConnection: (
    args?: {
      where?: ApontamentosWhereInput;
      orderBy?: ApontamentosOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ApontamentosConnection;
  ponto: (where: PontoWhereUniqueInput) => Ponto;
  pontoes: (
    args?: {
      where?: PontoWhereInput;
      orderBy?: PontoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PontoNode>;
  pontoesConnection: (
    args?: {
      where?: PontoWhereInput;
      orderBy?: PontoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PontoConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserNode>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApontamentos: (data: ApontamentosCreateInput) => Apontamentos;
  updateApontamentos: (
    args: { data: ApontamentosUpdateInput; where: ApontamentosWhereUniqueInput }
  ) => Apontamentos;
  updateManyApontamentoses: (
    args: { data: ApontamentosUpdateInput; where?: ApontamentosWhereInput }
  ) => BatchPayload;
  upsertApontamentos: (
    args: {
      where: ApontamentosWhereUniqueInput;
      create: ApontamentosCreateInput;
      update: ApontamentosUpdateInput;
    }
  ) => Apontamentos;
  deleteApontamentos: (where: ApontamentosWhereUniqueInput) => Apontamentos;
  deleteManyApontamentoses: (where?: ApontamentosWhereInput) => BatchPayload;
  createPonto: (data: PontoCreateInput) => Ponto;
  updatePonto: (
    args: { data: PontoUpdateInput; where: PontoWhereUniqueInput }
  ) => Ponto;
  updateManyPontoes: (
    args: { data: PontoUpdateInput; where?: PontoWhereInput }
  ) => BatchPayload;
  upsertPonto: (
    args: {
      where: PontoWhereUniqueInput;
      create: PontoCreateInput;
      update: PontoUpdateInput;
    }
  ) => Ponto;
  deletePonto: (where: PontoWhereUniqueInput) => Ponto;
  deleteManyPontoes: (where?: PontoWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  apontamentos: (
    where?: ApontamentosSubscriptionWhereInput
  ) => ApontamentosSubscriptionPayloadSubscription;
  ponto: (
    where?: PontoSubscriptionWhereInput
  ) => PontoSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ApontamentosOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "data_ASC"
  | "data_DESC"
  | "hini_ASC"
  | "hini_DESC"
  | "hfim_ASC"
  | "hfim_DESC"
  | "hdesconto_ASC"
  | "hdesconto_DESC"
  | "htranslado_ASC"
  | "htranslado_DESC"
  | "htotstr_ASC"
  | "htotstr_DESC"
  | "htot_ASC"
  | "htot_DESC"
  | "cliente_ASC"
  | "cliente_DESC"
  | "chamado_ASC"
  | "chamado_DESC"
  | "obs_ASC"
  | "obs_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PontoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "data_ASC"
  | "data_DESC"
  | "ent1_ASC"
  | "ent1_DESC"
  | "sai1_ASC"
  | "sai1_DESC"
  | "ent2_ASC"
  | "ent2_DESC"
  | "sai2_ASC"
  | "sai2_DESC"
  | "obs_ASC"
  | "obs_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type ApontamentosWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export type PontoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  data?: DateTimeInput;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  email?: String;
}>;

export interface PontoCreateInput {
  data: DateTimeInput;
  ent1?: Float;
  sai1?: Float;
  ent2?: Float;
  sai2?: Float;
  obs?: String;
}

export interface ApontamentosWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  data?: DateTimeInput;
  data_not?: DateTimeInput;
  data_in?: DateTimeInput[] | DateTimeInput;
  data_not_in?: DateTimeInput[] | DateTimeInput;
  data_lt?: DateTimeInput;
  data_lte?: DateTimeInput;
  data_gt?: DateTimeInput;
  data_gte?: DateTimeInput;
  hini?: String;
  hini_not?: String;
  hini_in?: String[] | String;
  hini_not_in?: String[] | String;
  hini_lt?: String;
  hini_lte?: String;
  hini_gt?: String;
  hini_gte?: String;
  hini_contains?: String;
  hini_not_contains?: String;
  hini_starts_with?: String;
  hini_not_starts_with?: String;
  hini_ends_with?: String;
  hini_not_ends_with?: String;
  hfim?: String;
  hfim_not?: String;
  hfim_in?: String[] | String;
  hfim_not_in?: String[] | String;
  hfim_lt?: String;
  hfim_lte?: String;
  hfim_gt?: String;
  hfim_gte?: String;
  hfim_contains?: String;
  hfim_not_contains?: String;
  hfim_starts_with?: String;
  hfim_not_starts_with?: String;
  hfim_ends_with?: String;
  hfim_not_ends_with?: String;
  hdesconto?: String;
  hdesconto_not?: String;
  hdesconto_in?: String[] | String;
  hdesconto_not_in?: String[] | String;
  hdesconto_lt?: String;
  hdesconto_lte?: String;
  hdesconto_gt?: String;
  hdesconto_gte?: String;
  hdesconto_contains?: String;
  hdesconto_not_contains?: String;
  hdesconto_starts_with?: String;
  hdesconto_not_starts_with?: String;
  hdesconto_ends_with?: String;
  hdesconto_not_ends_with?: String;
  htranslado?: String;
  htranslado_not?: String;
  htranslado_in?: String[] | String;
  htranslado_not_in?: String[] | String;
  htranslado_lt?: String;
  htranslado_lte?: String;
  htranslado_gt?: String;
  htranslado_gte?: String;
  htranslado_contains?: String;
  htranslado_not_contains?: String;
  htranslado_starts_with?: String;
  htranslado_not_starts_with?: String;
  htranslado_ends_with?: String;
  htranslado_not_ends_with?: String;
  htotstr?: String;
  htotstr_not?: String;
  htotstr_in?: String[] | String;
  htotstr_not_in?: String[] | String;
  htotstr_lt?: String;
  htotstr_lte?: String;
  htotstr_gt?: String;
  htotstr_gte?: String;
  htotstr_contains?: String;
  htotstr_not_contains?: String;
  htotstr_starts_with?: String;
  htotstr_not_starts_with?: String;
  htotstr_ends_with?: String;
  htotstr_not_ends_with?: String;
  htot?: Float;
  htot_not?: Float;
  htot_in?: Float[] | Float;
  htot_not_in?: Float[] | Float;
  htot_lt?: Float;
  htot_lte?: Float;
  htot_gt?: Float;
  htot_gte?: Float;
  cliente?: String;
  cliente_not?: String;
  cliente_in?: String[] | String;
  cliente_not_in?: String[] | String;
  cliente_lt?: String;
  cliente_lte?: String;
  cliente_gt?: String;
  cliente_gte?: String;
  cliente_contains?: String;
  cliente_not_contains?: String;
  cliente_starts_with?: String;
  cliente_not_starts_with?: String;
  cliente_ends_with?: String;
  cliente_not_ends_with?: String;
  chamado?: String;
  chamado_not?: String;
  chamado_in?: String[] | String;
  chamado_not_in?: String[] | String;
  chamado_lt?: String;
  chamado_lte?: String;
  chamado_gt?: String;
  chamado_gte?: String;
  chamado_contains?: String;
  chamado_not_contains?: String;
  chamado_starts_with?: String;
  chamado_not_starts_with?: String;
  chamado_ends_with?: String;
  chamado_not_ends_with?: String;
  obs?: String;
  obs_not?: String;
  obs_in?: String[] | String;
  obs_not_in?: String[] | String;
  obs_lt?: String;
  obs_lte?: String;
  obs_gt?: String;
  obs_gte?: String;
  obs_contains?: String;
  obs_not_contains?: String;
  obs_starts_with?: String;
  obs_not_starts_with?: String;
  obs_ends_with?: String;
  obs_not_ends_with?: String;
  AND?: ApontamentosWhereInput[] | ApontamentosWhereInput;
  OR?: ApontamentosWhereInput[] | ApontamentosWhereInput;
  NOT?: ApontamentosWhereInput[] | ApontamentosWhereInput;
}

export interface PontoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PontoWhereInput;
  AND?: PontoSubscriptionWhereInput[] | PontoSubscriptionWhereInput;
  OR?: PontoSubscriptionWhereInput[] | PontoSubscriptionWhereInput;
  NOT?: PontoSubscriptionWhereInput[] | PontoSubscriptionWhereInput;
}

export interface ApontamentosCreateInput {
  data: DateTimeInput;
  hini: String;
  hfim: String;
  hdesconto?: String;
  htranslado?: String;
  htotstr?: String;
  htot?: Float;
  cliente?: String;
  chamado?: String;
  obs?: String;
}

export interface ApontamentosUpdateInput {
  data?: DateTimeInput;
  hini?: String;
  hfim?: String;
  hdesconto?: String;
  htranslado?: String;
  htotstr?: String;
  htot?: Float;
  cliente?: String;
  chamado?: String;
  obs?: String;
}

export interface PontoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  data?: DateTimeInput;
  data_not?: DateTimeInput;
  data_in?: DateTimeInput[] | DateTimeInput;
  data_not_in?: DateTimeInput[] | DateTimeInput;
  data_lt?: DateTimeInput;
  data_lte?: DateTimeInput;
  data_gt?: DateTimeInput;
  data_gte?: DateTimeInput;
  ent1?: Float;
  ent1_not?: Float;
  ent1_in?: Float[] | Float;
  ent1_not_in?: Float[] | Float;
  ent1_lt?: Float;
  ent1_lte?: Float;
  ent1_gt?: Float;
  ent1_gte?: Float;
  sai1?: Float;
  sai1_not?: Float;
  sai1_in?: Float[] | Float;
  sai1_not_in?: Float[] | Float;
  sai1_lt?: Float;
  sai1_lte?: Float;
  sai1_gt?: Float;
  sai1_gte?: Float;
  ent2?: Float;
  ent2_not?: Float;
  ent2_in?: Float[] | Float;
  ent2_not_in?: Float[] | Float;
  ent2_lt?: Float;
  ent2_lte?: Float;
  ent2_gt?: Float;
  ent2_gte?: Float;
  sai2?: Float;
  sai2_not?: Float;
  sai2_in?: Float[] | Float;
  sai2_not_in?: Float[] | Float;
  sai2_lt?: Float;
  sai2_lte?: Float;
  sai2_gt?: Float;
  sai2_gte?: Float;
  obs?: String;
  obs_not?: String;
  obs_in?: String[] | String;
  obs_not_in?: String[] | String;
  obs_lt?: String;
  obs_lte?: String;
  obs_gt?: String;
  obs_gte?: String;
  obs_contains?: String;
  obs_not_contains?: String;
  obs_starts_with?: String;
  obs_not_starts_with?: String;
  obs_ends_with?: String;
  obs_not_ends_with?: String;
  AND?: PontoWhereInput[] | PontoWhereInput;
  OR?: PontoWhereInput[] | PontoWhereInput;
  NOT?: PontoWhereInput[] | PontoWhereInput;
}

export interface ApontamentosSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ApontamentosWhereInput;
  AND?:
    | ApontamentosSubscriptionWhereInput[]
    | ApontamentosSubscriptionWhereInput;
  OR?:
    | ApontamentosSubscriptionWhereInput[]
    | ApontamentosSubscriptionWhereInput;
  NOT?:
    | ApontamentosSubscriptionWhereInput[]
    | ApontamentosSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface PontoUpdateInput {
  data?: DateTimeInput;
  ent1?: Float;
  sai1?: Float;
  ent2?: Float;
  sai2?: Float;
  obs?: String;
}

export interface UserCreateInput {
  name: String;
  email: String;
}

export interface UserUpdateInput {
  name?: String;
  email?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateApontamentosNode {
  count: Int;
}

export interface AggregateApontamentos
  extends Promise<AggregateApontamentosNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApontamentosSubscription
  extends Promise<AsyncIterator<AggregateApontamentosNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  name: String;
  email: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface ApontamentosEdgeNode {
  cursor: String;
}

export interface ApontamentosEdge
  extends Promise<ApontamentosEdgeNode>,
    Fragmentable {
  node: <T = Apontamentos>() => T;
  cursor: () => Promise<String>;
}

export interface ApontamentosEdgeSubscription
  extends Promise<AsyncIterator<ApontamentosEdgeNode>>,
    Fragmentable {
  node: <T = ApontamentosSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePontoNode {
  count: Int;
}

export interface AggregatePonto
  extends Promise<AggregatePontoNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePontoSubscription
  extends Promise<AsyncIterator<AggregatePontoNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PontoNode {
  id: ID_Output;
  data: DateTimeOutput;
  ent1?: Float;
  sai1?: Float;
  ent2?: Float;
  sai2?: Float;
  obs?: String;
}

export interface Ponto extends Promise<PontoNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<DateTimeOutput>;
  ent1: () => Promise<Float>;
  sai1: () => Promise<Float>;
  ent2: () => Promise<Float>;
  sai2: () => Promise<Float>;
  obs: () => Promise<String>;
}

export interface PontoSubscription
  extends Promise<AsyncIterator<PontoNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<DateTimeOutput>>;
  ent1: () => Promise<AsyncIterator<Float>>;
  sai1: () => Promise<AsyncIterator<Float>>;
  ent2: () => Promise<AsyncIterator<Float>>;
  sai2: () => Promise<AsyncIterator<Float>>;
  obs: () => Promise<AsyncIterator<String>>;
}

export interface ApontamentosPreviousValuesNode {
  id: ID_Output;
  data: DateTimeOutput;
  hini: String;
  hfim: String;
  hdesconto?: String;
  htranslado?: String;
  htotstr?: String;
  htot?: Float;
  cliente?: String;
  chamado?: String;
  obs?: String;
}

export interface ApontamentosPreviousValues
  extends Promise<ApontamentosPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<DateTimeOutput>;
  hini: () => Promise<String>;
  hfim: () => Promise<String>;
  hdesconto: () => Promise<String>;
  htranslado: () => Promise<String>;
  htotstr: () => Promise<String>;
  htot: () => Promise<Float>;
  cliente: () => Promise<String>;
  chamado: () => Promise<String>;
  obs: () => Promise<String>;
}

export interface ApontamentosPreviousValuesSubscription
  extends Promise<AsyncIterator<ApontamentosPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<DateTimeOutput>>;
  hini: () => Promise<AsyncIterator<String>>;
  hfim: () => Promise<AsyncIterator<String>>;
  hdesconto: () => Promise<AsyncIterator<String>>;
  htranslado: () => Promise<AsyncIterator<String>>;
  htotstr: () => Promise<AsyncIterator<String>>;
  htot: () => Promise<AsyncIterator<Float>>;
  cliente: () => Promise<AsyncIterator<String>>;
  chamado: () => Promise<AsyncIterator<String>>;
  obs: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  id: ID_Output;
  name: String;
  email: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<UserEdgeNode>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PontoSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PontoSubscriptionPayload
  extends Promise<PontoSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Ponto>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PontoPreviousValues>() => T;
}

export interface PontoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PontoSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PontoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PontoPreviousValuesSubscription>() => T;
}

export interface PontoEdgeNode {
  cursor: String;
}

export interface PontoEdge extends Promise<PontoEdgeNode>, Fragmentable {
  node: <T = Ponto>() => T;
  cursor: () => Promise<String>;
}

export interface PontoEdgeSubscription
  extends Promise<AsyncIterator<PontoEdgeNode>>,
    Fragmentable {
  node: <T = PontoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface ApontamentosSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ApontamentosSubscriptionPayload
  extends Promise<ApontamentosSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Apontamentos>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApontamentosPreviousValues>() => T;
}

export interface ApontamentosSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApontamentosSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApontamentosSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApontamentosPreviousValuesSubscription>() => T;
}

export interface ApontamentosNode {
  id: ID_Output;
  data: DateTimeOutput;
  hini: String;
  hfim: String;
  hdesconto?: String;
  htranslado?: String;
  htotstr?: String;
  htot?: Float;
  cliente?: String;
  chamado?: String;
  obs?: String;
}

export interface Apontamentos extends Promise<ApontamentosNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<DateTimeOutput>;
  hini: () => Promise<String>;
  hfim: () => Promise<String>;
  hdesconto: () => Promise<String>;
  htranslado: () => Promise<String>;
  htotstr: () => Promise<String>;
  htot: () => Promise<Float>;
  cliente: () => Promise<String>;
  chamado: () => Promise<String>;
  obs: () => Promise<String>;
}

export interface ApontamentosSubscription
  extends Promise<AsyncIterator<ApontamentosNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<DateTimeOutput>>;
  hini: () => Promise<AsyncIterator<String>>;
  hfim: () => Promise<AsyncIterator<String>>;
  hdesconto: () => Promise<AsyncIterator<String>>;
  htranslado: () => Promise<AsyncIterator<String>>;
  htotstr: () => Promise<AsyncIterator<String>>;
  htot: () => Promise<AsyncIterator<Float>>;
  cliente: () => Promise<AsyncIterator<String>>;
  chamado: () => Promise<AsyncIterator<String>>;
  obs: () => Promise<AsyncIterator<String>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ApontamentosConnectionNode {}

export interface ApontamentosConnection
  extends Promise<ApontamentosConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<ApontamentosEdgeNode>>() => T;
  aggregate: <T = AggregateApontamentos>() => T;
}

export interface ApontamentosConnectionSubscription
  extends Promise<AsyncIterator<ApontamentosConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApontamentosEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApontamentosSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PontoConnectionNode {}

export interface PontoConnection
  extends Promise<PontoConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = FragmentableArray<PontoEdgeNode>>() => T;
  aggregate: <T = AggregatePonto>() => T;
}

export interface PontoConnectionSubscription
  extends Promise<AsyncIterator<PontoConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PontoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePontoSubscription>() => T;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PontoPreviousValuesNode {
  id: ID_Output;
  data: DateTimeOutput;
  ent1?: Float;
  sai1?: Float;
  ent2?: Float;
  sai2?: Float;
  obs?: String;
}

export interface PontoPreviousValues
  extends Promise<PontoPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  data: () => Promise<DateTimeOutput>;
  ent1: () => Promise<Float>;
  sai1: () => Promise<Float>;
  ent2: () => Promise<Float>;
  sai2: () => Promise<Float>;
  obs: () => Promise<String>;
}

export interface PontoPreviousValuesSubscription
  extends Promise<AsyncIterator<PontoPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  data: () => Promise<AsyncIterator<DateTimeOutput>>;
  ent1: () => Promise<AsyncIterator<Float>>;
  sai1: () => Promise<AsyncIterator<Float>>;
  ent2: () => Promise<AsyncIterator<Float>>;
  sai2: () => Promise<AsyncIterator<Float>>;
  obs: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  endpoint: `https://us1.prisma.sh/pfinance/pfinance/dev`
});
export const prisma = new Prisma();
